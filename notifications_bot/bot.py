from database import django_db_setup, save_to_db, get_from_db_by_token, get_from_db_by_chat_id
from admin import bot_started, bot_deactivated
from aiogram import Dispatcher, Bot
from _config import TOKEN
from aiogram.filters import Command
import asyncio
import logging
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router, F

django_db_setup()
from cabinet.models import NotificationBot

router = Router()



async def commands(bot_: Bot):
    command = [
        BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    ]
    await bot_.set_my_commands(command, BotCommandScopeDefault())


@router.message(Command(commands=['start']))
async def auth(message: Message):
    args = message.text.split()
    if len(args) == 2:
        uuid_token = args[1]
        try:
            notif = await get_from_db_by_token(uuid_token)
            notif.telegram_chat_id = message.chat.id
            notif.authorized = True
            notif.notifications_included = True
            await save_to_db(notif)

            notif_text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã‚úÖ'
            reply_keyboard = ReplyKeyboardMarkup(
                resize_keyboard=True,
                keyboard=[                        [
                        KeyboardButton(text=notif_text)
                    ],
                ]
            )
            await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã! –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç.",
                                 reply_markup=reply_keyboard)
            print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º {uuid_token}")


        except NotificationBot.DoesNotExist:
           await message.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞.")
           print(f"[WARN] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω {uuid_token} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    else:
        notif = await get_from_db_by_chat_id(message.chat.id)

        if notif and notif.authorized:
            notif_text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã‚úÖ' if notif.notifications_included else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã‚ùå'
            reply_keyboard = ReplyKeyboardMarkup(
                resize_keyboard=True,
                keyboard=[
                    [
                        KeyboardButton(text=notif_text)
                    ],
                ]
            )
            await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ãüîë –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç.", reply_markup=reply_keyboard)
        else:
            await message.answer(
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ãüö´\n"
                "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'."
            )


@router.message(F.text.in_(['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã‚úÖ', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã‚ùå']))
async def toggle_notifications(message: Message):
    try:
        notif = await get_from_db_by_chat_id(message.chat.id)
        if not notif:
            await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        notif.notifications_included = not notif.notifications_included
        await save_to_db(notif)

        notif_text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã‚úÖ' if notif.notifications_included else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã‚ùå'

        reply_keyboard = ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [
                    KeyboardButton(text=notif_text)
                ],
            ]
        )

        await message.answer(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if notif.notifications_included else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}",
            reply_markup=reply_keyboard
        )

    except Exception as e:
        print(f"[ERROR] toggle_notifications: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")





async def main():
    logging.basicConfig(
        level=logging.INFO
    )
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    dp.startup.register(bot_started)
    dp.shutdown.register(bot_deactivated)

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())



